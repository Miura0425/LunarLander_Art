<---　ま　と　め　--->
/*----------------------------------------------------------------------------*/
<--流れ-->
-メインテーマと実装項目について
-メインテーマ達成のため利用したもの
-ユーザーアカウント実装について１(自動ログイン・自動サインアップ)
-ユーザーアカウント実装について２(引き継ぎ「Googleアカウントの利用」)
-スコア関係の実装について
-実機での紹介
-まとめ

/*----------------------------------------------------------------------------*/
-メインテーマ
「クライアントとサーバー　月着陸船ゲームにサーバー通信を使った機能を実装する」

-実装項目
・ユーザーアカウント
  自動サインアップ・自動ログイン
  アカウント引き継ぎ

・スコア関係機能
  スコアログ
　スコアランキング
/*----------------------------------------------------------------------------*/
--サーバーとの通信
〇UnityWebRequestを利用
〇ローカル環境：XAMPP
〇AWS:EC2とRDSを利用
〇サーバーサイドは掲示板作成と同様にPHP-CodeIgniterで作成
/*----------------------------------------------------------------------------*/
--ユーザーアカウントの実装
〇実装方法について苦悩していた。
  メアドの作成？メアドIDパスワードを覚えておく？面倒な部分
    お借りした本のニフティクラウドでの実装方法を参考にして、ソーシャルゲームでは当たり前な自動サインアップ・自動ログインを実装することに決定。
      ニフティクラウドのサービスとUnity用SDKで自動サインアップやログインなどを簡単に実装していた。
      処理の流れ・どんな情報が必要か・サーバー側に必要な処理・DBの構造はどんな感じか仕様を作成し実装していった。

      自動サインアップ
        ニックネームの入力→作成ボタン→内部でIDとパスをGUID32桁の頭8桁で作成
        →サーバーに送信→重複チェック→重複なしならDBに追加→ローカルにID・パスを保存してサインアップ完了
      自動ログイン
        ローカルのIDパスをサーバーに送信→DBから検索→ユーザーがあったらデータを送信
        →データを更新してログイン完了

      仕様通りに処理の流れ・構造を作成し、サインアップ・ログインが面倒な手間なくできるようになった。

〇ソーシャルログインの利用
  　最近よくみるSNSのアカウントを利用して、アカウント作成の手間を省いたりする。
  　Twitter・FaceBook・Yahoo！・GoogleのアカウントでWebサービスにログインするといったもの。
    実際は、SNSのユーザーデータにアクセスして必要な情報を取得し、サインアップしている。
    /*----------------------------------------------------------------------------*/
    SNSによって取得できるデータは様々
    FaceBook「氏名、性別、血液型、誕生日、メールアドレス、住所（市区町村まで）、写真、 興味・関心、職歴、学歴、地域、友達リストほか」
    Yahho!「氏名、ふりがな、性別、生年、メールアドレス、郵便番号、都道府県、市区町村、電話番号、完全住所（番地以降の住所、マンション名など）」
    Twitter「氏名、ニックネーム、メールアドレス、プロフィール写真、フォローリスト、フォロワーリストほか」
    Google+「	氏名、ニックネーム、メールアドレス、プロフィール写真、住所、言語ほか」
    何のために取得するのかわからない個人データへのアクセスはユーザーにとって不安要素を高めてしまうので、最低限の情報取得にとどめておくことが大切。
    /*----------------------------------------------------------------------------*/

  　ぜひ使ってみよう→WebViewの利用やら Mac環境でしか見れないやら 仕様出し当時はプロ版ではなかった
  　かなり課題が山積みで、期間的に難しいと判断。
  　でもSNSアカウントは利用したい・・・
  　 そこで目を付けたのが アカウント引き継ぎ機能
      ニフティ本ではIDとパスを入力することでアカウント引き継ぎを行っていた。
      IDパスを覚えたりするのが面倒なのでSNSのアカウントを利用できるのでは？

      -引き継ぎ設定ページを開いてGoogleアカウントでアプリを承認
      →GoogleユーザーIDを取得してゲームアカウントに紐づける
      -引き継ぎページを開いてGoogleアカウントにログイン
      →GoogleユーザーIDからゲームアカウントを探し、引き継ぎ処理を実行する。
      <今回はアカウント作成が容易だったのでGoogleを使用。>
      Google認証の設定
      -Googleアカウントの作成
      -Google Developers Consoleからプロジェクトの作成と認証情報・OAuth用クライアントIDの取得
      -サーバーにGoogleとOAuth認証をする流れを実装

      ※OAuth(オー オース) 外部サービスがサービス内のユーザーデータなどにアクセスできるようにする認可する仕組み
      Google ←　アプリ(LunarLander) がユーザーデータにアクセスしたい
      Google → ユーザー に アプリがユーザーデータへのアクセスを許可するか問う
      許可されたらアクセストークンを生成。アプリがアクセストークンを利用してユーザーデータへアクセス

      少々無理やりな実装ですが、SNSアカウントを利用してみようという目標は達成することができた。


--スコア関係の機能
〇ユーザーアカウントがあるので、名前なんかの情報を入力する手間がなくIDとSCOREなどの必要情報を送る。
  ユーザーID、SCORE、ステージ数、プレイ時間をプレイデータとする。
  共有データベースにプレイデータをどんどん追加していく。

  ユーザーのプレイ履歴を取得する場合
   ユーザーIDからプレイデータを取得→その中からハイスコアと最大クリアステージ数を算出
                                →最新10件分のプレイデータを取得
                                →必要データを返す→プレイデータをUIに反映する。
  ランキングを取得する場合
   ユーザーIDの重複を除き、スコアの降順で取得する→その中からユーザーのランキングデータを取得
                                             →100位までのランキングデータを取得
                                             →必要データを返す→ランキングデータをUIに反映する。

現状プレイデータが少ないので取得に要する時間は短いが、データ量が増えるとほぼ確実に時間が増えるので
高速なSQL文を考える必要があると思う。

/*----------------------------------------------------------------------------*/
<--まとめ-->
仕様段階では簡易なアカウントシステムを実装した後、スコア関係の機能かステージエディット機能のどちらかを実装する流れを考えていた。
別作業にとられる時間が多くなってきたこともあり、路線変更を行う。
アカウントシステムにSNSの利用を組み込むことで、アカウントシステムに重きを置いた。
アカウントシステム実装の後、スコア関係の機能を実装することで決定した。

サーバーとの通信やDBへのアクセスは改良の余地があると思える。
Json形式での受け渡しの部分や通信データは暗号化するなど、SQLの高速化など

サムライのコードを見ていて、自分の構造の雑さまとまりのなさというのが理解できました。
今回は改修するには時間がかかるうえリスクが高いので見送り。
個人的には改修したいので今後時間があるときに手を入れていきたい。
/*----------------------------------------------------------------------------*/
